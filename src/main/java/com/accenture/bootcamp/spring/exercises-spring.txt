************** exercise 60 **************
    1) Setup your spring project
    2) Define (using annotations) the following spring beans / dependencies:
          BeanA (has no dependencies)
          BeanB (has dependency BeanA)
          BeanC (has dependency BeanA and BeanB)
        Autowiring should be done via constructor.
    3) Start your spring application and see if it actually works
        (make sure there are no exceptions)

        Tip: you will have to use @Component annotation.

    4) Define (using configuration class) the following beans:
        Owner (has no dependencies)
        Dog (has Owner property/dependency)
        Cat (has Owner property/dependency)
        House (has Owner, Dog and Cat dependency)
        Start your spring application and see if it actually works
                (make sure there are no exceptions)

        Tip: You will have to use @Configuration and @Bean annotations for this.

    5) Autowiring by interface practice:
        a) Create interface Shape
        b) Create class Triangle which implements interface Shape (configure it so it's a spring bean)
        c) Create class Square which implements interface Shape (configure it so it's a spring bean)
        d) Start the application. Did everything work? Did you have errors?
        e) Create bean Figures and try to autowire dependency (via constructor):
            private Shape shape1;
        f) Start the program, did it work? What's the problem? Can you google and find out
           why it doesn't work?
        g) How could you configure your application so the instance of Triangle would be autowired
           into Figures class, shape1 property?

        Tips: read about @Primary annotation


************* Homework *************
    1) read/understand about @Qualifier annotation and bean naming.
    2) Explain in your own words (latviski! :)):
        a) what is inversion of control and dependency injection
        b) what is spring bean and spring application context
        c) What is the default scope of spring beans? And how does it work?

    Send the answers to the teacher. (yes, I will read them)


************** exercise 61 **************
    1) design / create REST API for calculator
        a) figure out which HTTP method will you use? (remember about safe / unsafe / idempotent / non-idempotent
         HTTP methods)
        b) Implement controller layer (CalculatorController)
        c) implement service layer (CalculateService).

        Hint:
            The API could look like this:
                /calculator/result?number1=10&number2=5&operation=add   (this can be a GET method)
            And the response:
                {
                   "result" : 15
                }

            So you will have to create:
               CalculatorController class where you will define HTTP endpoint
               Calculator class which has method "calculate" and accepts three parameters:
                    number1, number2, operation
               and will return Result object (which will contain "result" property).

************** exercise 62 **************
    * Implement REST CRUD API for TO-DO list items. The item consists of three fields:
            id (number)
            title (text of what has to be done)
            complete (indicates if TO-DO item is complete or not)

        API which is needed:
            * GET      /todos/{id}    - returns a single ToDo item:
                Example response:
                    {
                      "id":3,
                      "title":"Learn programming",
                      "complete":true
                    }

            * GET      /todos       - returns all ToDO items.
                Example response:
                    [
                       {
                          "id":3,
                          "title":"Learn programming",
                          "complete":true
                       },
                       {
                          "id":7,
                          "title":"go to gym",
                          "complete":false
                       }
                    ]

            * POST     /todos       - inserts/saves ToDO item on server (you will also need to generate a new ID)
                Example request body:
                    {
                      "title": "buy groceries",
                      "complete": false
                    }
                example response:
                     {
                       "id":3,
                       "title":"buy groceries",
                       "complete":false
                     }

            * PUT      /todos/{id}    - updates ToDo item on server
                Example request:
                    PUT /todos/4
                    {
                       "id":3,
                       "title":"buy groceries",
                       "complete":true
                    }
                Example response:
                    {
                       "id":3,
                       "title":"buy groceries",
                       "complete":true
                    }

            * DELETE   /todos/{id}    - deletes TODO item on server

        Hints:
            See DogsController to better understand how to create controller with these methods,
            You will have to create the following classes:
                ToDoItem
                ToDoController
                ToDoRepository (you have to implement ToDoItemRepository interface)
                    This class will store ToDo items. Decide which data structure / collection
                    you want to use for storing the items.
