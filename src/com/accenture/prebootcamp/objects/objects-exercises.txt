1. create class "Animal" with properties "type", "name" and "age"
    * create constructor with three parameters "type", "name" and "age" for setting the properties
    * create two objects each with different names and ages (two objects of type "cat" and one "dog")
    * create a method "makeSound" which prints "wuff!" if the animal type is "dog" or "meow!" if
      the animal type is "cat"

    Hint: Create class ObjectsExercise1 with main method. Here you can create instances of class Animal,
          call methods, etc.


2. create a class "BankAccount" with property "balance" (should be decimal number)
    * create empty default constructor for it
    * create a constructor with parameter for setting balance.
    * create a method "deposit" with one parameter "amount" (decimal number)
        which allows user to increase his balance.
    * create a method "withdraw" with one parameter "amount"
        (decimal number) which allows user to decrease his balance.
    * create a method "printBalance" which displays the current balance to user
    * method for transfer balance from one bank account to another


3. create class "Rectangle" with properties "width" and "height" (whole numbers).
    * create default constructor which sets "height" to 5 and "width" to 10
    * create a constructor with parameters "width" and "height" which sets the corresponding property values
    * create methods "getHeight" and "getWidth" which return the corresponding properties
    * create a method "getPerimeter" (sum all sides) which calculates and returns the perimeter of the rectangle
    * create a method "getArea" (multiply with with height) which calculates and returns the area of rectangle
    * create a method "incrementHeight" with no parameters, which increments height by one
    * create a method "incrementWidth" with no parameters, which increments width by one
    * add validation in constructors which doesn't allow to create Rectangle with negative or zero
        width or height. If height or width is not positive, set it to 5 and 10


4. Create a game:
       1. Create a class "Weapon" and:
           a. Add properties (should be encapsulated as private):
               "power" (whole number)
               "name"  (text)
           b. Add getter methods for all of the properties in "Weapon" class
           c. Add default constructor which initializes properties with default values
               (default power should be 3 and name - "Axe")
           d. Add constructor with parameters "power" and "name" for setting properties of the weapon
              (this constructor should validate power value and shouldn't allow to set it less than 1
               or higher than 10. It should also validate name. If name has less than 4 characters or
               more than 20, it should be set to default ("Axe"))
       2. Create a class "Player" and:
           a. add property "name" (of type text)
           b. add property "weapon" (of type Weapon)
           c. add property "health" (whole number)
           e. add constructor which has two parameters for setting name and Weapon. Also in this
              constructor you should set health to 1000
           f. add getter method for "name" and "health" properties
           g. add method "isAlive" which returns true if user has health greater than 0, or false
              player's health is 0 or less. Access should be private.
           h. create a method "subtractHealth" with parameter "points" (whole number).
               This method subtracts points from players health property and outputs message:
                   "[name] lost [numberOfPoints] points and now has [health]] left."
               But, if points is greater than player's health it sets players health to zero and prints this
               message instead: "[name] just lost all his last points and died!".
               If this player is already dead already (has 0 or less health), then we don't need to subtract
               any points or output any message.
           i. add "attack" method with one parameter of type "Player" (this is the victim). This method
              is used so our player (the object on which we call the method) can attack another player
              (victim/the object which is the parameter).
              First, before we attack victim, we need to check if we are alive (if our player is alive).
              If our player is dead, then we just output message:
                       "[name] is unable to attack, because he is dead."
              and return from method without attacking victim. But if we are alive, we have to
              take the power of our weapon and subtract it from the victims health (so we basically
              call "subtractHealth" method on our victim) and before that print message:
                   "[attackerName] is attacking [victimName] with [weapon.name]"

       3 . Create class "Game" with main method. In this main method we will create (instantiate)
           our objects and use them to battle (attack each other).
             a. create two weapons (choose power and name as you wish)
             b. Create two players with the previously created weapons
             c. Implement a method "battle" which makes the players attack each other 30 times. Method has
                two parameters (both are of type Player). To make players attack each other, use previously
                created "attack" method for attacking. Example of players attacking each other:
                     player1.attack(player2); //player1 is attacking player2 (both variables are of type Player)
                     player2.attack(player1); //player2 is attacking player2 (both variables are of type Player)
             d. call the "battle" method in main method and pass to it the players you previously created.
             e. implement a method "determineWinner" which has two parameters (both are of type Player).
                The purpose  of this method is to print out who won the battle (to determine that
                 you need to compare the health points of both players) and who has how many points.
                example of message:
                       "John won Jane by 140 points." (so in this case John had 140 points more than Jane
                            after all of the battles)


       //Example code in main method:
           Player john = new Player("John", new Weapon("Axe", 10));
           Player jane = new Player("Jane", new Weapon("Sword", 3));

           battle(john, jane);

           determineWinner(john, jane);

       //Here is how the output should look like:
               John is attacking Jane with Axe
               Jane lost 10 points and now has 990 left.
               Jane is attacking John with Sword
               John lost 3 points and now has 997 left.
               John is attacking Jane with Axe
               Jane lost 10 points and now has 980 left.
               ...
               Jane lost 10 points and now has 800 left.
               Jane is attacking John with Sword
               John lost 3 points and now has 940 left.
               John won Jane by 140 points.

       //try to change the number of battles and execute the program and see how it behaves.
